#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2014 Osiris Alejandro Gomez <osiux@osiux.com.ar>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

YEAR=$(date +%Y)
MONTH=$(date +%m)
DAY=$(date +%d)
DIR=$PWD
NOW=$YEAR-$MONTH-$DAY
FULLYEAR=0
STDOUT=1

usage ()
{
cat << EOF
Use: org-plot [options]

Options:

    -h show this help
    -d set directory, default current directory
    -y set year
    -m set month
    -f from date
    -t to date
    -D last N days
    -p plt filename
    -g png filename (stdout by default)
    -a dat filename
    -Y full year graph
EOF
}

while getopts "D:Ya:d:f:g:hm:p:t:t:y:" OPTION
do
  case $OPTION in
    Y)
        FULLYEAR=1
        ;;
    y)
        YEAR=$OPTARG
        ;;
    m)
        MONTH=$OPTARG
        ;;
    D)
        LAST_DAYS=$OPTARG
        ;;
    f)
        FROM=$OPTARG
        ;;
    t)
        TO=$OPTARG
        ;;
    d)
        DIR=$OPTARG
        ;;
    p)
        PLT=$OPTARG
        ;;
    g)
        PNG=$OPTARG
        STDOUT=0
        ;;
    a)
        DAT=$OPTARG
        ;;
    h)
        usage
        exit
        ;;
  esac
done

if [ -d $DIR ]
then
  cd $DIR
else
  echo ERROR $DIR
  exit 1
fi

TOTAL_ORG=$(ls -1 *.org 2>/dev/null | wc -l)

if [ $TOTAL_ORG -eq 0 ]
then
  echo ERROR no found *.org files
  exit 1
fi

if [ $FULLYEAR -eq 1 ]
then
  PATTERN=$YEAR'-[0-9]{2}-[0-9]{2}'
else
  PATTERN=$YEAR'-'$MONTH'-[0-9]{2}'
fi

DAYS=$(egrep -ho "CLOCK:(.*)$PATTERN" *.org | awk '{print $2}' | tr -d "[" | egrep -o "[0-9\-]+" | sort -u)
FILES=$(egrep -l "CLOCK:(.*)$PATTERN" *.org | sort -u)

TOTAL_DAYS=$(echo $DAYS | tr " " "\n" | wc -l)

MIN=$(echo $DAYS | tr " " "\n" | head -1)
MAX=$(echo $DAYS | tr " " "\n" | tail -1)
RMIN=$(date "--date=$MIN -1 day" +%Y-%m-%d)
RMAX=$(date "--date=$MAX +1 day" +%Y-%m-%d)
XMIN='"'${RMIN}'"'
XMAX='"'${RMAX}'"'

DAT='org-task-by-day-'$MIN'-'$MAX'.dat'
PLT='org-task-by-day-'$MIN'-'$MAX'.plt'
PNG='org-task-by-day-'$MIN'-'$MAX'.png'

echo -en 'dia\t' >$DAT
for F in $FILES
do
 printf "%s\tmin\t" $(basename $F .org) >>$DAT
done
echo -en '\n' >>$DAT

for DAY in $DAYS
do
 SEP='\t'
 for F in $FILES
 do
   grep "CLOCK: \[$DAY" $F | tr "[]" " " | awk '{split($10,a,":"); print $2,$4,a[1]*60+a[2]}' | sort | while read T
   do
     START=$(echo $T | awk '{print $2}')
     MINUTES=$(echo $T | awk '{print $3}')
     echo -e "${DAY}${SEP}${START}\t${MINUTES}" >>$DAT
   done
   ZERO=0
   SEP=$(echo -en "${SEP}${ZERO}\t${ZERO}\t")
 done
done

TDAT=$(wc -l $DAT | awk '{print $1}')

if [ $TDAT -eq 0 ]
then
  echo ERROR empty $DAT
  exit 1
fi

TOTAL=$(echo $FILES | tr " " "\n" | wc -l)

LW=1

if [ $TOTAL_DAYS -ge  1 ];then LW=20;fi
if [ $TOTAL_DAYS -ge 15 ];then LW=20;fi
if [ $TOTAL_DAYS -ge 30 ];then LW=10;fi
if [ $TOTAL_DAYS -ge 40 ];then LW=10;fi
if [ $TOTAL_DAYS -ge 45 ];then LW=10;fi
if [ $TOTAL_DAYS -ge 60 ];then LW=10;fi
if [ $TOTAL_DAYS -ge 90 ];then LW=10;fi
if [ $TOTAL_DAYS -ge 180 ];then LW=5;fi
if [ $TOTAL_DAYS -ge 360 ];then LW=3;fi

if [ $FULLYEAR -eq 1 ]
then
  SIZE='1024, 768'
  KEY='key off'
  RMARGIN=1
else
  SIZE='800, 600'
  KEY='key samplen 1 spacing 1 outside font "Inconsolata,10"'
  RMARGIN=14
fi

TITLE='Orgmode Task by Day\n'$MIN' - '$MAX

cat <<EOF >$PLT
reset
set terminal png size $SIZE
set lmargin 5
set bmargin 5
set rmargin $RMARGIN
set title " $TITLE " font "Inconsolata,10"
set xdata time
set ydata time

set timefmt x "%Y-%m-%d"
set format x "%d"

set timefmt y "%H:%M"
set format y "%H"
set yrange ["00:01":"23:59"]
set $KEY
set xtics 60*60*24 font "Inconsolata,8" nomirror rotate
set ytics font "Inconsolata,8" nomirror
set grid lc rgb "#d5e0c9"
set grid ytics mytics
set mytics

unset mxtics
set xrange [$XMIN:$XMAX]
f=($TOTAL*2)
plot for [i=2:f:2] '$DAT' u 1:i:(0):(column(i+1)*60) with vec lw $LW nohead ti col(i)
EOF

TPLT=$(wc -l $PLT | awk '{print $1}')

if [ $TPLT -eq 0 ]
then
  echo ERROR empty $PLT
  exit 1
fi

if [ $STDOUT -eq 1 ]
then
  gnuplot $PLT
else
  gnuplot $PLT >$PNG
fi

echo $DIR/$PNG

